@book{okasaki,
  title = {Purely {{Functional Data Structures}}},
  author = {Okasaki, Chris},
  date = {1998},
  publisher = {Cambridge University Press},
  location = {Cambridge},
  doi = {10.1017/CBO9780511530104},
  urldate = {2025-04-06},
  abstract = {Most books on data structures assume an imperative language like C
              or C++. However, data structures for these languages do not always
              translate well to functional languages such as Standard ML, Haskell
              , or Scheme. This book describes data structures from the point of
              view of functional languages, with examples, and presents design
              techniques so that programmers can develop their own functional
              data structures. It includes both classical data structures, such
              as red-black trees and binomial queues, and a host of new data
              structures developed exclusively for functional languages. All
              source code is given in Standard ML and Haskell, and most of the
              programs can easily be adapted to other functional languages. This
              handy reference for professional programmers working with
              functional languages can also be used as a tutorial or for
              self-study.},
  isbn = {978-0-521-63124-2},
}

@inproceedings{rondonLiquidTypes2008,
  title = {Liquid Types},
  booktitle = {Proceedings of the 29th {{ACM SIGPLAN Conference}} on {{
               Programming Language Design}} and {{Implementation}}},
  author = {Rondon, Patrick M. and Kawaguci, Ming and Jhala, Ranjit},
  date = {2008-06-07},
  series = {{{PLDI}} '08},
  pages = {159--169},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/1375581.1375602},
  url = {https://dl.acm.org/doi/10.1145/1375581.1375602},
  urldate = {2025-03-03},
  abstract = {We present Logically Qualified Data Types, abbreviated to Liquid
              Types, a system that combines Hindley-Milner type inference with
              Predicate Abstraction to automatically infer dependent types
              precise enough to prove a variety of safety properties. Liquid
              types allow programmers to reap many of the benefits of dependent
              types, namely static verification of critical properties and the
              elimination of expensive run-time checks, without the heavy price
              of manual annotation. We have implemented liquid type inference in
              DSOLVE, which takes as input an OCAML program and a set of logical
              qualifiers and infers dependent types for the expressions in the
              OCAML program. To demonstrate the utility of our approach, we
              describe experiments using DSOLVE to statically verify the safety
              of array accesses on a set of OCAML benchmarks that were previously
              annotated with dependent types as part of the DML project. We show
              that when used in conjunction with a fixed set of array bounds
              checking qualifiers, DSOLVE reduces the amount of manual annotation
              required for proving safety from 31\% of program text to under 1\%.
              },
  isbn = {978-1-59593-860-2},
}

@article{vazou2018,
  title = {Refinement Reflection: Complete Verification with {{SMT}}},
  shorttitle = {Refinement Reflection},
  author = {Vazou, Niki and Tondwalkar, Anish and Choudhury, Vikraman and Scott,
            Ryan G. and Newton, Ryan R. and Wadler, Philip and Jhala, Ranjit},
  date = {2018-01},
  journaltitle = {Proceedings of the ACM on Programming Languages},
  shortjournal = {Proc. ACM Program. Lang.},
  volume = {2},
  pages = {1--31},
  issn = {2475-1421},
  doi = {10.1145/3158141},
  url = {https://dl.acm.org/doi/10.1145/3158141},
  urldate = {2024-12-15},
  abstract = {We introduce Refinement Reflection , a new framework for building
              SMT-based deductive verifiers. The key idea is to reflect the code
              implementing a user-defined function into the function’s (output)
              refinement type. As a consequence, at uses of the function, the
              function definition is instantiated in the SMT logic in a precise
              fashion that permits decidable verification. Reflection allows the
              user to write equational proofs of programs just by writing other
              programs using pattern-matching and recursion to perform
              case-splitting and induction. Thus, via the propositions-as-types
              principle, we show that reflection permits the specification of
              arbitrary functional correctness properties. Finally, we introduce
              a proof-search algorithm called Proof by Logical Evaluation that
              uses techniques from model checking and abstract interpretation, to
              completely automate equational reasoning. We have implemented
              reflection in Liquid Haskell and used it to verify that the widely
              used instances of the Monoid, Applicative, Functor, and Monad
              typeclasses actually satisfy key algebraic laws required to make
              the clients safe, and have used reflection to build the first
              library that actually verifies assumptions about associativity and
              ordering that are crucial for safe deterministic parallelism.},
  issue = {POPL},
  langid = {english},
}

@book{knuth1973taocp3,
  author = {Donald E. Knuth},
  title = {The Art of Computer Programming, Volume 3: Sorting and Searching},
  publisher = {Addison-Wesley},
  year = {1973},
  edition = {1st},
  address = {Reading, Massachusetts},
  isbn = {0-201-03803-X},
}

@techreport{crane1972,
  author = {Clark Crane},
  title = {Linear Lists and Priority Queues as Balanced Binary Trees},
  institution = {Carnegie Mellon University},
  year = {1972},
  type = {Technical Report},
}

@article{vazou2014,
  title = {Refinement Types For Haskell},
  volume = {49},
  issn = {978-1-4503-2873-9},
  doi = {10.1145/2628136.2628161},
  abstract = {{SMT}-based checking of refinement types for call-by-value
              languages is a well-studied subject. Unfortunately, the classical
              translation of refinement types to verification conditions is
              unsound under lazy evaluation. When checking an expression, such
              systems implicitly assume that all the free variables in the
              expression are bound to values. This property is trivially
              guaranteed by eager, but does not hold under lazy, evaluation. Thus
              , to be sound and precise, a refinement type system for Haskell and
              the corresponding verification conditions must take into account
              which subset of binders actually reduces to values. We present a
              stratified type system that labels binders as potentially diverging
              or not, and that (circularly) uses refinement types to verify the
              labeling. We have implemented our system in {LIQUIDHASKELL} and
              present an experimental evaluation of our approach on more than 10,
              000 lines of widely used Haskell libraries. We show that {
              LIQUIDHASKELL} is able to prove 96\% of all recursive functions
              terminating, while requiring a modest 1.7 lines of
              termination-annotations per 100 lines of code.},
  journal = {{ACM} {SIGPLAN} Notices},
  shortjournal = {{ACM} {SIGPLAN} Notices},
  author = {Vazou, Niki and Seidel, Eric and Jhala, Ranjit and Vytiniotis,
            Dimitrios and Peyton Jones, Simon},
  year = {2014},
  date = {2014-08-19},
}

@misc{niki_lecture_2024,
  title = {{Programming with Refinement Types} Lecture},
  author = {Vazou, Niki},
  url = {https://nikivazou.github.io/lh-course},
  date = {2024-03-15},
}

@article{pena2017,
  title = {An {{Introduction}} to {{Liquid Haskell}}},
  author = {Peña, Ricardo},
  date = {2017-01-12},
  journaltitle = {Electronic Proceedings in Theoretical Computer Science},
  shortjournal = {Electronic Proceedings in Theoretical Computer Science},
  volume = {237},
  doi = {10.4204/EPTCS.237.5},
  abstract = {This paper is a tutorial introducing the underlying technology and
              the use of the tool Liquid Haskell, a type-checker for the
              functional language Haskell that can help programmers to verify
              non-trivial properties of their programs with a low effort. The
              first sections introduce the technology of Liquid Types by
              explaining its principles and summarizing how its type inference
              algorithm manages to prove properties. The remaining sections
              present a selection of Haskell examples and show the kind of
              properties that can be proved with the system.},
  file = {/home/mehran/Zotero/storage/SPM6IEBU/Peña - 2017 - An Introduction to
          Liquid Haskell.pdf},
}


@misc{jhala2020,
  title = {Programming {With} {Refinement} {Types}},
  language = {en},
  url = {https://ucsd-progsys.github.io/liquidhaskell-tutorial/},
  author = {Jhala, Ranjit and Seidel, Eric and Vazou, Niki},
  month = jul,
  year = {2020},
  file = {PDF:/home/mehran/Zotero/storage/35GVUEX9/Jhala et al. - Programming
          With Refinement Types.pdf:application/pdf},
}

@article{wadler_propositions_2015,
  title = {Propositions as types},
  volume = {58},
  issn = {0001-0782},
  url = {https://dl.acm.org/doi/10.1145/2699407},
  doi = {10.1145/2699407},
  abstract = {Connecting mathematical logic and computation, it ensures that
              some aspects of programming are absolute.},
  pages = {75--84},
  number = {12},
  journal = {Commun. {ACM}},
  author = {Wadler, Philip},
  urldate = {2025-02-03},
  date = {2015-11-23},
  year = {2015},
  file = {Full Text PDF:/home/mehran/Zotero/storage/PHW6DIQS/Wadler - 2015 -
          Propositions as types.pdf:application/pdf},
}

@inproceedings{vazou_liquidhaskell_2014,
  address = {New York, NY, USA},
  series = {Haskell '14},
  title = {{LiquidHaskell}: experience with refinement types in the real world},
  isbn = {978-1-4503-3041-1},
  shorttitle = {{LiquidHaskell}},
  url = {https://dl.acm.org/doi/10.1145/2633357.2633366},
  doi = {10.1145/2633357.2633366},
  abstract = {Haskell has many delightful features. Perhaps the one most beloved
              by its users is its type system that allows developers to specify
              and verify a variety of program properties at compile time. However
              , many properties, typically those that depend on relationships
              between program values are impossible, or at the very least,
              cumbersome to encode within the existing type system. Many such
              properties can be verified using a combination of Refinement Types
              and external SMT solvers. We describe the refinement type checker
              liquidHaskell, which we have used to specify and verify a variety
              of properties of over 10,000 lines of Haskell code from various
              popular libraries, including containers, hscolour, bytestring, text
              , vector-algorithms and xmonad. First, we present a high-level
              overview of liquidHaskell, through a tour of its features. Second,
              we present a qualitative discussion of the kinds of properties that
              can be checked -- ranging from generic application independent
              criteria like totality and termination, to application specific
              concerns like memory safety and data structure correctness
              invariants. Finally, we present a quantitative evaluation of the
              approach, with a view towards measuring the efficiency and
              programmer effort required for verification, and discuss the
              limitations of the approach.},
  urldate = {2024-11-11},
  booktitle = {Proceedings of the 2014 {ACM} {SIGPLAN} symposium on {Haskell}},
  publisher = {Association for Computing Machinery},
  author = {Vazou, Niki and Seidel, Eric L. and Jhala, Ranjit},
  month = sep,
  year = {2014},
  pages = {39--51},
  file = {Full Text PDF:/home/mehran/Zotero/storage/N4JFL7PI/Vazou et al. - 2014
          - LiquidHaskell experience with refinement types in the real
          world.pdf:application/pdf},
}

@article{Dijkstra59,
  author = {Dijkstra, E. W.},
  title = {A note on two problems in connexion with graphs},
  journal = {Numerische Mathematik},
  volume = {1},
  pages = {269--271},
  year = {1959},
  doi = {10.1007/BF01386390},
}

@article{Prim57,
  author = {Prim, R. C.},
  title = {Shortest connection networks and some generalizations},
  journal = {The Bell System Technical Journal},
  volume = {36},
  number = {6},
  pages = {1389--1401},
  year = {1957},
  doi = {10.1002/j.1538-7305.1957.tb01515.x},
}

@inproceedings{Huffman52,
  author = {Huffman, David A.},
  title = {A Method for the Construction of Minimum-Redundancy Codes},
  booktitle = {Proceedings of the IRE},
  volume = {40},
  number = {9},
  pages = {1098--1101},
  year = {1952},
  doi = {10.1109/JRPROC.1952.273898},
}

@article{Hoare69,
  author = {Hoare, C. A. R.},
  title = {An Axiomatic Basis for Computer Programming},
  journal = {Communications of the ACM},
  volume = {12},
  number = {10},
  pages = {576--580},
  year = {1969},
  doi = {10.1145/363235.363259},
}

@article{Nelson79,
  author = {Nelson, Greg and Oppen, Derek C.},
  title = {Simplification by Cooperating Decision Procedures},
  journal = {ACM Transactions on Programming Languages and Systems},
  volume = {1},
  number = {2},
  pages = {245--257},
  year = {1979},
  doi = {10.1145/357073.357079},
}

@article{Shostak84,
  author = {Shostak, Robert E.},
  title = {Deciding Combinations of Theories},
  journal = {Journal of the ACM},
  volume = {31},
  number = {1},
  pages = {1--12},
  year = {1984},
  doi = {10.1145/2422.322411},
}

@incollection{Bertot11,
  author = {Bertot, Yves and Komendantsky, Vladimir},
  title = {Verification and Extraction for a Functional Priority Queue},
  booktitle = {Interactive Theorem Proving},
  year = {2011},
  publisher = {Springer Berlin Heidelberg},
  pages = {131--146},
  doi = {10.1007/978-3-642-22863-6_11},
}


@inproceedings{Norell11Agda,
  author = {Ulf Norell and James Chapman},
  title = {Dependently Typed Programming in Agda},
  booktitle = {Proceedings of the 6th International Summer School on Advanced
               Functional Programming Languages (AFP)},
  series = {Lecture Notes in Computer Science},
  volume = {6627},
  pages = {230--277},
  year = {2011},
  publisher = {Springer-Verlag},
  doi = {10.1007/978-3-642-24204-5_6},
  note = {Also presented as a tutorial at multiple venues.},
}

@misc{VerifiedFunctional,
  author = {Appel, Andrew W. and Tolmach, Andrew and Clarkson, Michael},
  title = {Verified {{Functional Algorithms}}},
  url = {https://softwarefoundations.cis.upenn.edu/vfa-current/index.html},
  urldate = {2025-09-16},
  file = {/home/mehran/Zotero/storage/A6RR3S4R/index.html},
}
